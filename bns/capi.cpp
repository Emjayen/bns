/*
 * capi.cpp
 *
 */
#include "capi.h"
#include "helper.h"





const char* CAPI_TXT_FIELD[0x10] =
{
	/* 0x0 */ "<NULL>",
	/* 0x1 */ "channel",
	/* 0x2 */ "command",
	/* 0x3 */ "code",
	/* 0x4 */ "user_id",
	/* 0x5 */ "<NULL>",
	/* 0x6 */ "<NULL>",
	/* 0x7 */ "toon_name",
	/* 0x8 */ "flags",
	/* 0x9 */ "area",
	/* 0xA */ "message",
	/* 0xB */ "payload",
	/* 0xC */ "type",
	/* 0xD */ "request_id",
	/* 0xE */ "status",
	/* 0xF */ "attributes",
};


#define FT_NONE      0
#define FT_STR       1
#define FT_STR_ENUM  2
#define FT_INT       3

static const uib FIELD_DESC[0x10] =
{
	FT_NONE,
	FT_STR,
	FT_STR_ENUM,
	FT_INT,
	FT_INT,
	FT_NONE,
	FT_NONE,
	FT_STR,
	FT_STR,
	FT_INT,
	FT_STR,
	FT_NONE,
	FT_STR,
	FT_INT,
	FT_INT,
	FT_STR,
};

static const byte field_ppt[] =
{
	0xE7, 0x47, 0xF9, 0xDD, 0xBF, 0x6E, 0xDB, 0xC5, 0x70, 0x6F, 0x4C, 0x1B, 0x13, 0x28, 0x84, 0xE5,
	0xA3, 0xEB, 0xAB, 0xD2, 0xC4, 0x84, 0x6A, 0xDF, 0xDC, 0x3D, 0xFE, 0xC0, 0x82, 0x97, 0xDB, 0x45,
	0x06, 0x24, 0x52, 0x83, 0xF7, 0xB5, 0x70, 0x36, 0x29, 0x4D, 0x1A, 0xF3, 0x16, 0xB8, 0x48, 0x63,
	0x90, 0x9E, 0xE5, 0x75, 0x1D, 0x37, 0x51, 0xF6, 0x7E, 0x4E, 0x80, 0x64, 0xC7, 0x71, 0xDA, 0x42,
	0x99, 0xD5, 0xA9, 0x86, 0x04, 0x0F, 0x5F, 0xD5, 0xCC, 0x86, 0x72, 0xA9, 0xC6, 0x5E, 0xB3, 0xCC,
	0xBD, 0x23, 0xF8, 0x92, 0x85, 0x91, 0xA9, 0xE0, 0xA3, 0x4E, 0x28, 0x2B, 0xEF, 0xA2, 0x18, 0x2D,
	0x62, 0x65, 0xE0, 0x22, 0x9B, 0x6B, 0x6A, 0xAC, 0x99, 0x14, 0x76, 0x69, 0xFC, 0x3B, 0x28, 0x44,
	0x59, 0x26, 0x4D, 0x8B, 0xDA, 0xFB, 0x09, 0xCE, 0x29, 0x09, 0xB7, 0x1A, 0x10, 0x2F, 0xC8, 0xB1,
	0xC6, 0x88, 0x42, 0xDE, 0xA0, 0x64, 0xEB, 0x04, 0x35, 0x39, 0x1E, 0x03, 0xF4, 0x24, 0x07, 0xBE,
	0xF6, 0x09, 0xE5, 0x25, 0xCC, 0x5A, 0xBE, 0x67, 0x0E, 0x2B, 0xB3, 0xCD, 0xDD, 0x39, 0x04, 0x56,
	0xA0, 0x8E, 0xE0, 0x79, 0x65, 0x23, 0x65, 0xC7, 0xD1, 0x59, 0x8B, 0x86, 0x5F, 0x1A, 0x4B, 0x9B,
	0x01, 0xA0, 0x30, 0xAE, 0x44, 0x1A, 0x3B, 0x5E, 0x2D, 0xA1, 0xDF, 0x60, 0x19, 0x8E, 0x09, 0xCF,
	0x4E, 0xCF, 0x65, 0x47, 0x49, 0x1D, 0x95, 0x13, 0xE7, 0x17, 0x91, 0xA3, 0x15, 0xC4, 0x60, 0x20,
	0x5B, 0xA2, 0xAF, 0x13, 0x47, 0x93, 0x5F, 0x1E, 0x71, 0x5E, 0xCC, 0x06, 0x21, 0x82, 0x36, 0x79,
	0x5B, 0x6A, 0x3F, 0x8E, 0x9A, 0x73, 0x88, 0x13, 0x64, 0x11, 0x51, 0xE9, 0x63, 0x24, 0xCA, 0x77,
	0x7B, 0xFC, 0xA4, 0x7B, 0x5B, 0x71, 0x97, 0xBB, 0x4A, 0x7F, 0x68, 0x8A, 0x0A, 0x1C, 0xE0, 0x0F,
};


const char* CAPI_TXT_VALUE[] =
{
	/* 0x0 */ "<NULL>",
	/* 0x1 */ "Botapichat.UserUpdateEventRequest",
	/* 0x2 */ "Botapichat.KickUserResponse",
	/* 0x3 */ "Botapichat.SendMessageResponse",
	/* 0x4 */ "<NULL>",
	/* 0x5 */ "Botapiauth.AuthenticateResponse",
	/* 0x6 */ "Botapichat.MessageEventRequest",
	/* 0x7 */ "Botapichat.SendEmoteResponse",
	/* 0x8 */ "Botapichat.UnbanUserResponse",
	/* 0x9 */ "Botapichat.UserLeaveEventRequest",
	/* 0xA */ "Botapichat.BanUserResponse",
	/* 0xB */ "Botapichat.DisconnectEventRequest",
	/* 0xC */ "Botapichat.SendSetModeratorResponse",
	/* 0xD */ "Botapichat.ConnectEventRequest",
	/* 0xE */ "Botapichat.SendWhisperResponse",
	/* 0xF */ "Botapichat.ConnectResponse",
};




const byte value_ppt[] =
{
	0x62, 0x23, 0xA5, 0xD2, 0xAE, 0xAE, 0x3F, 0x0B, 0x76, 0xE8, 0xFE, 0xCF, 0x30, 0xD8, 0x95, 0xF2,
	0xBD, 0xBC, 0x5B, 0x1F, 0x8D, 0xDC, 0xA5, 0xBE, 0x70, 0xDB, 0x68, 0x8A, 0x0D, 0x7D, 0x05, 0x33,
	0x46, 0x3C, 0x35, 0x0A, 0xB6, 0xB0, 0x1B, 0x60, 0x71, 0x3D, 0x9E, 0x6F, 0xE6, 0xD9, 0xDB, 0xB7,
	0xB1, 0xC5, 0xD1, 0xFD, 0x5A, 0xAF, 0x3C, 0xCC, 0xCD, 0xA2, 0x76, 0x99, 0xC2, 0xF4, 0xEC, 0xBA,
	0xC4, 0x01, 0x12, 0x55, 0x4A, 0xDB, 0xD9, 0x92, 0x00, 0x06, 0x9C, 0xBD, 0x59, 0x4E, 0xD2, 0x29,
	0x47, 0x83, 0xF6, 0xF8, 0x12, 0xCE, 0x66, 0x51, 0xE5, 0x6E, 0x59, 0x26, 0xA9, 0x52, 0xB0, 0x5B,
	0xA2, 0x4A, 0x2B, 0xF9, 0xAC, 0x7C, 0x4A, 0x1A, 0xA0, 0x94, 0x5A, 0xE9, 0xFD, 0xB3, 0x28, 0x79,
	0x0E, 0x60, 0x64, 0x5D, 0x3D, 0xF2, 0xB6, 0xC9, 0x9F, 0x61, 0x83, 0x8F, 0x48, 0x1E, 0xD7, 0x86,
	0x00, 0xB2, 0x21, 0x1F, 0xA5, 0xA3, 0x2B, 0x35, 0xA7, 0x99, 0x5C, 0xD2, 0x40, 0x59, 0x47, 0xC6,
	0xE9, 0x90, 0xBB, 0xE1, 0x50, 0x60, 0xD1, 0xF2, 0x2E, 0xB5, 0xA7, 0xF2, 0xF7, 0x9F, 0x85, 0x8B,
	0xE0, 0x68, 0x8E, 0x56, 0xDE, 0xDA, 0xDD, 0x5D, 0x53, 0x5D, 0x98, 0xA5, 0xFB, 0xE5, 0xD8, 0x5D,
	0x53, 0xB7, 0x91, 0x0F, 0xBB, 0x8D, 0x30, 0x95, 0x4A, 0x89, 0x2C, 0x3E, 0xD7, 0x1F, 0x15, 0x8C,
	0x0E, 0x18, 0x27, 0xAD, 0x07, 0x87, 0xE3, 0x44, 0x4C, 0xBC, 0x11, 0xD5, 0x5A, 0x19, 0x86, 0x5D,
	0x36, 0x16, 0xD4, 0x1A, 0x23, 0x99, 0x94, 0x86, 0x7B, 0xB3, 0x71, 0xE3, 0x30, 0x20, 0x5C, 0x3E,
	0x67, 0x22, 0xD2, 0x71, 0xEE, 0xAC, 0xA7, 0x7C, 0x88, 0x7B, 0x73, 0xDC, 0xE6, 0x11, 0x5F, 0x81,
	0xBF, 0xF3, 0xC8, 0x8A, 0x44, 0xEA, 0x6F, 0x14, 0x33, 0x84, 0xDA, 0x5B, 0xF5, 0x47, 0x61, 0x5A,

};


union token
{
	char* p;
	char c;
	uid _v;
};


static token json_tok(char*& rp)
{
	while(*rp && *rp <= 0x20)
		rp++;

	switch(*rp)
	{
		case '\0':
			return { NULL };

		case '{':
		case '}':
		case ':':
		case ',':
			return { (char*) *rp++ };

		case '"':
		{
			char* p = ++rp;

			while(*rp && (*rp != '"' && *(rp-1) != '\\'))
				rp++;

			if(!*rp)
				return { NULL };

			*rp++ = '\0';

			return { p };
		}
		break;

		default:
			char* p = rp++;

			while(*rp >= 0x20 && *rp != ',' && *rp != '}')
				rp++;

			if(!*rp)
				return { NULL };

			*rp++ = '\0';

			return { p };
	}
}


/*
 * CAPIParse
 *
 */
void CAPIParse(char* pJSON, capi_msg* pMsg)
{
	token tk;
	char* pLast = NULL;
	uib Field = NULL;

	memzero(pMsg, sizeof(capi_msg));

	while((tk = json_tok(pJSON)).p)
	{
		if(tk._v > 0xFF)
		{
			pLast = tk.p;

			if(Field && FIELD_DESC[Field])
			{
				switch(FIELD_DESC[Field])
				{
					case FT_INT: pMsg->f[Field]._int = sxui(pLast); break;
					case FT_STR: pMsg->f[Field]._pstr = pLast; break;
					case FT_STR_ENUM: pMsg->f[Field]._int = pearson_hash(pLast, value_ppt) & 0x0F; break;
				}

				Field = NULL;
			}
		}

		else if(tk.c == ':' && pLast)
		{
			if(!FIELD_DESC[(Field = pearson_hash(pLast, field_ppt) & 0x0F) ])
				Field = NULL;
		}
	}
}